{"version":3,"file":"static/js/74.42bcbfeb.chunk.js","mappings":"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","sources":["components/Inbox.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { FaSearch, FaEnvelope, FaEnvelopeOpen, FaTrash, FaReply, FaCheck, FaTimes } from 'react-icons/fa';\nimport './Inbox.css';\n\nconst Inbox = () => {\n  const [inquiries, setInquiries] = useState([]);\n  const [selectedInquiry, setSelectedInquiry] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [replyContent, setReplyContent] = useState('');\n  const [isReplying, setIsReplying] = useState(false);\n\n  // Load inquiries from localStorage\n  useEffect(() => {\n    const loadInquiries = () => {\n      try {\n        const savedInquiries = JSON.parse(localStorage.getItem('inquiries') || '[]');\n        setInquiries(savedInquiries);\n      } catch (error) {\n        console.error('Error loading inquiries:', error);\n      }\n    };\n\n    loadInquiries();\n    // Set up storage event listener to sync across tabs\n    window.addEventListener('storage', loadInquiries);\n    return () => window.removeEventListener('storage', loadInquiries);\n  }, []);\n\n  const filteredInquiries = inquiries.filter(inquiry => \n    inquiry.message.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    inquiry.serviceName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    inquiry.userName?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleInquiryClick = (inquiry) => {\n    // Mark as read\n    if (!inquiry.isRead) {\n      const updatedInquiries = inquiries.map(i => \n        i.id === inquiry.id ? { ...i, isRead: true } : i\n      );\n      setInquiries(updatedInquiries);\n      localStorage.setItem('inquiries', JSON.stringify(updatedInquiries));\n    }\n    setSelectedInquiry(inquiry);\n    setIsReplying(false);\n    setReplyContent('');\n  };\n\n  const handleReply = () => {\n    if (!replyContent.trim() || !selectedInquiry) return;\n\n    const updatedInquiries = inquiries.map(inquiry => {\n      if (inquiry.id === selectedInquiry.id) {\n        return {\n          ...inquiry,\n          status: 'replied',\n          reply: {\n            content: replyContent,\n            timestamp: new Date().toISOString(),\n          },\n          isRead: true\n        };\n      }\n      return inquiry;\n    });\n\n    setInquiries(updatedInquiries);\n    localStorage.setItem('inquiries', JSON.stringify(updatedInquiries));\n    setSelectedInquiry({\n      ...selectedInquiry,\n      status: 'replied',\n      reply: {\n        content: replyContent,\n        timestamp: new Date().toISOString(),\n      },\n      isRead: true\n    });\n    \n    setIsReplying(false);\n    setReplyContent('');\n  };\n\n  const handleDelete = (id, e) => {\n    e.stopPropagation();\n    const updatedInquiries = inquiries.filter(inquiry => inquiry.id !== id);\n    setInquiries(updatedInquiries);\n    localStorage.setItem('inquiries', JSON.stringify(updatedInquiries));\n    \n    if (selectedInquiry && selectedInquiry.id === id) {\n      setSelectedInquiry(null);\n    }\n  };\n\n  const formatDate = (dateString) => {\n    const options = { \n      year: 'numeric', \n      month: 'short', \n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n  };\n\n  return (\n    <div className=\"inbox-container\">\n      <div className=\"inbox-sidebar\">\n        <div className=\"inbox-header\">\n          <h2>Inquiries</h2>\n          <div className=\"search-bar\">\n            <FaSearch className=\"search-icon\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search inquiries...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n          </div>\n        </div>\n        \n        <div className=\"inquiry-list\">\n          {filteredInquiries.length === 0 ? (\n            <div className=\"empty-state\">\n              <FaEnvelopeOpen size={48} className=\"empty-icon\" />\n              <p>No inquiries found</p>\n            </div>\n          ) : (\n            filteredInquiries.map((inquiry) => (\n              <div \n                key={inquiry.id}\n                className={`inquiry-item ${selectedInquiry?.id === inquiry.id ? 'active' : ''} ${!inquiry.isRead ? 'unread' : ''}`}\n                onClick={() => handleInquiryClick(inquiry)}\n              >\n                <div className=\"inquiry-preview\">\n                  <div className=\"inquiry-header\">\n                    <h4>{inquiry.userName || 'Anonymous User'}</h4>\n                    <span className=\"inquiry-date\">\n                      {formatDate(inquiry.createdAt).split(',')[0]}\n                    </span>\n                  </div>\n                  <p className=\"inquiry-service\">{inquiry.serviceName || 'Service'}</p>\n                  <p className=\"inquiry-message\">\n                    {inquiry.message.length > 80 \n                      ? `${inquiry.message.substring(0, 80)}...` \n                      : inquiry.message}\n                  </p>\n                </div>\n                <div className=\"inquiry-actions\">\n                  <button \n                    className=\"icon-button delete-button\"\n                    onClick={(e) => handleDelete(inquiry.id, e)}\n                    aria-label=\"Delete inquiry\"\n                  >\n                    <FaTrash />\n                  </button>\n                  {inquiry.status === 'replied' && (\n                    <span className=\"status-badge replied\">\n                      <FaCheck /> Replied\n                    </span>\n                  )}\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n\n      <div className=\"inbox-detail\">\n        {selectedInquiry ? (\n          <>\n            <div className=\"inquiry-detail\">\n              <div className=\"detail-header\">\n                <div>\n                  <h2>{selectedInquiry.serviceName || 'Service Inquiry'}</h2>\n                  <p className=\"inquiry-meta\">\n                    From: {selectedInquiry.userName || 'Anonymous User'}\n                    {selectedInquiry.userEmail && ` (${selectedInquiry.userEmail})`}\n                  </p>\n                  <p className=\"inquiry-date\">\n                    {formatDate(selectedInquiry.createdAt)}\n                  </p>\n                </div>\n                <div className=\"detail-actions\">\n                  <button \n                    className=\"btn btn-outline\"\n                    onClick={() => {\n                      setIsReplying(!isReplying);\n                      setReplyContent('');\n                    }}\n                    disabled={selectedInquiry.status === 'replied'}\n                  >\n                    <FaReply /> {selectedInquiry.status === 'replied' ? 'Replied' : 'Reply'}\n                  </button>\n                  <button \n                    className=\"btn btn-text\"\n                    onClick={() => handleDelete(selectedInquiry.id, { stopPropagation: () => {} })}\n                  >\n                    <FaTrash />\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"inquiry-content\">\n                <h4>Message:</h4>\n                <p>{selectedInquiry.message}</p>\n              </div>\n\n              {selectedInquiry.status === 'replied' && selectedInquiry.reply && (\n                <div className=\"inquiry-reply\">\n                  <div className=\"reply-header\">\n                    <h4>Your Reply</h4>\n                    <span className=\"reply-date\">\n                      {formatDate(selectedInquiry.reply.timestamp)}\n                    </span>\n                  </div>\n                  <p>{selectedInquiry.reply.content}</p>\n                </div>\n              )}\n            </div>\n\n            {isReplying && (\n              <div className=\"reply-form\">\n                <h4>Send Reply</h4>\n                <textarea\n                  value={replyContent}\n                  onChange={(e) => setReplyContent(e.target.value)}\n                  placeholder=\"Type your reply here...\"\n                  rows=\"4\"\n                />\n                <div className=\"form-actions\">\n                  <button \n                    className=\"btn btn-outline\"\n                    onClick={() => setIsReplying(false)}\n                  >\n                    <FaTimes /> Cancel\n                  </button>\n                  <button \n                    className=\"btn btn-primary\"\n                    onClick={handleReply}\n                    disabled={!replyContent.trim()}\n                  >\n                    <FaReply /> Send Reply\n                  </button>\n                </div>\n              </div>\n            )}\n          </>\n        ) : (\n          <div className=\"empty-state empty-detail\">\n            <FaEnvelope size={64} className=\"empty-icon\" />\n            <h3>Select an inquiry to view details</h3>\n            <p>Choose an inquiry from the list to read and respond to messages.</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Inbox;\n"],"names":["Inbox","inquiries","setInquiries","useState","selectedInquiry","setSelectedInquiry","searchTerm","setSearchTerm","replyContent","setReplyContent","isReplying","setIsReplying","useEffect","loadInquiries","savedInquiries","JSON","parse","localStorage","getItem","error","console","window","addEventListener","removeEventListener","filteredInquiries","filter","inquiry","_inquiry$serviceName","_inquiry$userName","message","toLowerCase","includes","serviceName","userName","handleDelete","id","e","stopPropagation","updatedInquiries","setItem","stringify","formatDate","dateString","Date","toLocaleDateString","undefined","year","month","day","hour","minute","_jsxs","className","children","_jsx","FaSearch","type","placeholder","value","onChange","target","length","FaEnvelopeOpen","size","map","isRead","onClick","i","handleInquiryClick","createdAt","split","substring","FaTrash","status","FaCheck","_Fragment","userEmail","disabled","FaReply","reply","timestamp","content","rows","FaTimes","handleReply","trim","toISOString","FaEnvelope"],"sourceRoot":""}