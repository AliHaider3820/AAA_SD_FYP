{"version":3,"file":"static/js/869.ae805087.chunk.js","mappings":"oMAyJA,QAnJA,WACE,MAAOA,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAAiBC,IAAsBF,EAAAA,EAAAA,UAAS,KAChDG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,KAC5BK,EAASC,IAAcN,EAAAA,EAAAA,WAAS,IAChCO,EAASC,IAAcR,EAAAA,EAAAA,WAAS,IAChCS,IAAgBC,EAAAA,EAAAA,MACjBC,GAAWC,EAAAA,EAAAA,MACXC,EAAQJ,EAAaK,IAAI,SAyC/B,OAAKD,EAsBDN,GAEAQ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,UAC7BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wBAAuBC,SAAA,EACpCF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,gCACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,oGACHF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,UAC1BC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,oBAAgBF,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,SAASJ,UAAU,YAAWC,SAAC,mCAQnEF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,UAC7BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gCAA+BC,SAAA,EAC5CF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,yBACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,2CAEHC,EAAAA,EAAAA,MAAA,QAAMG,SAjFSC,UAGnB,GAFAC,EAAEC,iBAEE1B,IAAaG,EAKjB,GAAIH,EAAS2B,OAAS,EACpBrB,EAAS,mDADX,CAKAE,GAAW,GACXF,EAAS,IAET,UACQsB,EAAAA,EAAMC,KAAK,gDAAiD,CAChEd,QACAf,aAGF8B,EAAAA,GAAMrB,QAAQ,yCACdC,GAAW,GAGXqB,YAAW,KACTlB,EAAS,SAAS,GACjB,IAEL,CAAE,MAAOR,GAAQ,IAAD2B,EAAAC,EACd,MAAMC,GAAyB,QAAdF,EAAA3B,EAAM8B,gBAAQ,IAAAH,GAAM,QAANC,EAAdD,EAAgBI,YAAI,IAAAH,OAAN,EAAdA,EAAsBI,UAAW,2BAClD/B,EAAS4B,GACTJ,EAAAA,GAAMzB,MAAM6B,EACd,CAAC,QACC1B,GAAW,EACb,CAzBA,MAPEF,EAAS,yBAgCX,EA6CiCa,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAOqB,QAAQ,WAAUnB,SAAC,kBAC1BF,EAAAA,EAAAA,KAAA,SACEsB,GAAG,WACHC,KAAK,WACLC,KAAK,WACLC,aAAa,eACbC,UAAQ,EACRzB,UAAU,aACV0B,YAAY,qBACZC,MAAO7C,EACP8C,SAAWrB,GAAMxB,EAAYwB,EAAEsB,OAAOF,aAI1CzB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAOqB,QAAQ,mBAAkBnB,SAAC,0BAClCF,EAAAA,EAAAA,KAAA,SACEsB,GAAG,mBACHC,KAAK,mBACLC,KAAK,WACLC,aAAa,eACbC,UAAQ,EACRzB,UAAU,aACV0B,YAAY,uBACZC,MAAO1C,EACP2C,SAAWrB,GAAMrB,EAAmBqB,EAAEsB,OAAOF,YAIhDxC,IACCY,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,SAC3Bd,KAILY,EAAAA,EAAAA,KAAA,UACEwB,KAAK,SACLO,SAAUzC,EACVW,UAAU,cAAaC,SAEtBZ,EAAU,eAAiB,oBAG9BU,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,UAC1BF,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,SAASJ,UAAU,YAAWC,SAAC,6BAtF9CF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,UAC7BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,wBACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,wDACHF,EAAAA,EAAAA,KAAA,UACEgC,QAASA,IAAMpC,EAAS,oBACxBK,UAAU,cAAaC,SACxB,8BAGDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,UAC1BF,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,SAASJ,UAAU,YAAWC,SAAC,wBAmFpD,C","sources":["pages/ResetPassword.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate, useSearchParams, Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport './Auth.css';\n\nfunction ResetPassword() {\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const token = searchParams.get('token');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (password !== confirmPassword) {\n      setError('Passwords do not match');\n      return;\n    }\n    \n    if (password.length < 6) {\n      setError('Password must be at least 6 characters long');\n      return;\n    }\n    \n    setLoading(true);\n    setError('');\n    \n    try {\n      await axios.post('http://localhost:5000/api/auth/reset-password', {\n        token,\n        password,\n      });\n      \n      toast.success('Password has been reset successfully!');\n      setSuccess(true);\n      \n      // Redirect to login after 3 seconds\n      setTimeout(() => {\n        navigate('/login');\n      }, 3000);\n      \n    } catch (error) {\n      const errorMsg = error.response?.data?.message || 'Failed to reset password';\n      setError(errorMsg);\n      toast.error(errorMsg);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!token) {\n    return (\n      <div className=\"auth-container\">\n        <div className=\"auth-form\">\n          <h2>Invalid Reset Link</h2>\n          <p>The password reset link is invalid or has expired.</p>\n          <button\n            onClick={() => navigate('/forgot-password')}\n            className=\"auth-button\"\n          >\n            Request a new reset link\n          </button>\n          <div className=\"auth-footer\">\n            <Link to=\"/login\" className=\"auth-link\">\n              Back to Login\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (success) {\n    return (\n      <div className=\"auth-container\">\n        <div className=\"auth-form text-center\">\n          <h2>Password Reset Successful!</h2>\n          <p>Your password has been updated successfully. You will be redirected to the login page shortly.</p>\n          <div className=\"auth-footer\">\n            <p>Not redirected? <Link to=\"/login\" className=\"auth-link\">Click here to login</Link></p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"auth-container\">\n      <div className=\"auth-form reset-password-form\">\n        <h2>Reset Your Password</h2>\n        <p>Please enter your new password below.</p>\n        \n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"password\">New Password</label>\n            <input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              autoComplete=\"new-password\"\n              required\n              className=\"form-input\"\n              placeholder=\"Enter new password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"confirm-password\">Confirm New Password</label>\n            <input\n              id=\"confirm-password\"\n              name=\"confirm-password\"\n              type=\"password\"\n              autoComplete=\"new-password\"\n              required\n              className=\"form-input\"\n              placeholder=\"Confirm new password\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n            />\n          </div>\n\n          {error && (\n            <div className=\"error-message\">\n              {error}\n            </div>\n          )}\n\n          <button\n            type=\"submit\"\n            disabled={loading}\n            className=\"auth-button\"\n          >\n            {loading ? 'Resetting...' : 'Reset Password'}\n          </button>\n          \n          <div className=\"auth-footer\">\n            <Link to=\"/login\" className=\"auth-link\">\n              Back to Login\n            </Link>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default ResetPassword;\n"],"names":["password","setPassword","useState","confirmPassword","setConfirmPassword","error","setError","loading","setLoading","success","setSuccess","searchParams","useSearchParams","navigate","useNavigate","token","get","_jsx","className","children","_jsxs","Link","to","onSubmit","async","e","preventDefault","length","axios","post","toast","setTimeout","_error$response","_error$response$data","errorMsg","response","data","message","htmlFor","id","name","type","autoComplete","required","placeholder","value","onChange","target","disabled","onClick"],"sourceRoot":""}