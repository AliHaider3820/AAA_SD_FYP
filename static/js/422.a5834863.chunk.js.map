{"version":3,"file":"static/js/422.a5834863.chunk.js","mappings":"yLAMA,MAwXA,EAxXmBA,KACjB,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,IAC9BC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,IAC5BG,EAAQC,IAAaJ,EAAAA,EAAAA,UAAS,KAC9BK,EAAkBC,IAAuBN,EAAAA,EAAAA,UAAS,KAClDO,EAAkBC,IAAuBR,EAAAA,EAAAA,UAAS,OAClDS,EAAkBC,IAAuBV,EAAAA,EAAAA,UAAS,CAAC,IACnDW,EAAmBC,IAAwBZ,EAAAA,EAAAA,UAAS,KACpDa,EAAaC,IAAkBd,EAAAA,EAAAA,UAAS,KACxCe,EAAsBC,IAA2BhB,EAAAA,EAAAA,WAAS,IAC1DiB,EAAkBC,IAAuBlB,EAAAA,EAAAA,WAAS,IAClDmB,EAAWC,IAAgBpB,EAAAA,EAAAA,WAAS,IACpCqB,EAAOC,IAAYtB,EAAAA,EAAAA,UAAS,KAC5BuB,EAASC,IAAcxB,EAAAA,EAAAA,UAAS,KAChCyB,EAAcC,IAAmB1B,EAAAA,EAAAA,UAAS,IAC3C2B,GAAcC,EAAAA,EAAAA,QAAO,OAG3BC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAsBC,IACtBJ,EAAYK,UAAYL,EAAYK,QAAQC,SAASF,EAAMG,SAC7DlB,GAAwB,EAC1B,EAIF,OADAmB,SAASC,iBAAiB,YAAaN,GAChC,KACLK,SAASE,oBAAoB,YAAaP,EAAmB,CAC9D,GACA,IAEH,MAKMQ,EAAoB,CACxB,EAAG,oBACH,EAAG,kBACH,EAAG,gBACH,EAAG,gBACH,EAAG,qBACH,EAAG,gBACH,EAAG,mBACH,EAAG,cACH,EAAG,qBACH,GAAI,iBACJ,GAAI,iBAYAC,GAAWC,EAAAA,EAAAA,OAGjBX,EAAAA,EAAAA,YAAU,KACR,IAEE,6BAAmCY,MAAKC,IACtC,MAAMC,EAAgBD,EAAOE,QAC7BlC,EAAoBiC,EAAc,IACjCE,OAAMC,IACPC,QAAQ1B,MAAM,mCAAoCyB,GAClDxB,EAAS,4DAA4D,GAEzE,CAAE,MAAOwB,GACPxB,EAAS,6DACTyB,QAAQ1B,MAAM,mCAAoCyB,EACpD,CAAC,QACC1B,GAAa,EACf,IACC,KAGHS,EAAAA,EAAAA,YAAU,KACR,GAAIxB,GAAoBI,EAAiBJ,GAAmB,CAC1D,MAAM2C,EAAWvC,EAAiBJ,GAAkB4C,QAAOC,GACzDA,EAASC,KAAKC,cAAcC,SAASxC,EAAYuC,iBAEnDxC,EAAqBoC,EACvB,IACC,CAAC3C,EAAkBQ,EAAaJ,IAsGnC,OACE6C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,UAAQC,UAAU,cAAcE,QAASA,IAAMlB,GAAU,GAAGiB,SAAA,EAC1DE,EAAAA,EAAAA,KAACC,EAAAA,IAAW,IAAG,YAGjBL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,mBACJE,EAAAA,EAAAA,KAAA,KAAGH,UAAU,WAAUC,SAAC,qDAEvBnC,IAASqC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeC,SAAEnC,IACzCE,IAAWmC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,kBAAiBC,SAAEjC,KAE9C+B,EAAAA,EAAAA,MAAA,QAAMM,SApGOC,UAMnB,GALAC,EAAEC,iBACFzC,EAAS,IACTE,EAAW,KAGNC,EAAauC,OAEhB,YADAC,EAAAA,GAAM5C,MAAM,2BAKd,GAAIlB,EAAO+D,OAAS,GAElB,YADAD,EAAAA,GAAM5C,MAAM,+CAKd,GAAe,IAAXvB,EAEF,YADAmE,EAAAA,GAAM5C,MAAM,2BAKd,IAAKd,EAEH,YADA0D,EAAAA,GAAM5C,MAAM,qCAIdD,GAAa,GAEb,MAAM+C,EAAa,CACjB1C,aAAcA,EAAauC,OAC3BI,WAAY7D,EAAiB8D,IAAM9D,EAAiB+D,IACpDC,aAAchE,EAAiB4C,KAC/BqB,cAAejE,EAAiBkE,MAChCC,iBAAkBpC,EAAkBjC,IAAqB,UACzDP,SACA6E,QAASxE,GAGX,IACE,MAAMyE,QAAYC,MAAM,oCAAqC,CAC3DC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,YAAa,UACbC,KAAMC,KAAKC,UAAUhB,KAGjBiB,QAAaR,EAAIS,OAEvB,GAAmB,MAAfT,EAAIU,OAKN,OAJArB,EAAAA,GAAM5C,MAAM,0CACZkE,YAAW,KACTC,OAAOC,SAASC,KAAO,QAAQ,GAC9B,MAIDd,EAAIe,IACN1B,EAAAA,GAAM1C,QAAQ6D,EAAKQ,SAAW,wCAAoC,CAChEC,SAAU,YACVC,UAAW,IACXC,MAAO,UAIThG,EAAU,GACV2B,EAAgB,IAChBtB,EAAU,IACVI,EAAoB,OAEpByD,EAAAA,GAAM5C,MAAM+D,EAAKQ,SAAW,kCAEhC,CAAE,MAAO9C,GACPC,QAAQ1B,MAAM,2BAA4ByB,GAC1CmB,EAAAA,GAAM5C,MAAM,8CACd,CAAC,QACCD,GAAa,EACf,GAmBoCmC,UAAU,cAAaC,SAAA,EAEnDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBE,EAAAA,EAAAA,KAAA,SAAAF,SAAO,6BACPF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAWyC,IAAKrE,EAAY6B,SAAA,EACzCF,EAAAA,EAAAA,MAAA,OACEC,UAAU,+BACVE,QAnLkBK,IAC9BA,EAAEmC,kBACFjF,GAAwBkF,IAASA,GAAK,EAiLM1C,SAAA,CAE/BnD,EAAmBiC,EAAkBjC,GAAoB,qBAC1DqD,EAAAA,EAAAA,KAAA,QAAMH,UAAW,mBAAkBxC,EAAuB,OAAS,IAAKyC,SAAC,cAE1EzC,IACC2C,EAAAA,EAAAA,KAAA,OAAKH,UAAU,qBAAoBC,SAChC2C,OAAOC,QAAQ9D,GAAmB+D,KAAIC,IAAA,IAAEjC,EAAIlB,GAAKmD,EAAA,OAChD5C,EAAAA,EAAAA,KAAA,OAEEH,UAAU,gBACVE,QAASA,KAlI3BnD,EAkIsD+D,GAjItD7D,EAAoB,MACpBQ,GAAwB,GACxBE,GAAoB,QACpBJ,EAAe,KA8H2C0C,SAEvCL,GAJIkB,EAKD,YAQfhE,IACCiD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBE,EAAAA,EAAAA,KAAA,SAAAF,SAAO,6BACPF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BE,EAAAA,EAAAA,KAAA,SACE6C,KAAK,OACLC,YAAY,sBACZjD,UAAU,eACVkD,MAAO5F,EACP6F,SAAW5C,GAAMhD,EAAegD,EAAE5B,OAAOuE,OACzCE,QAASA,IAAMzF,GAAoB,KAEpCD,IACCyC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeC,SAC3B7C,EAAkBuD,OAAS,EAC1BvD,EAAkB0F,KAAKnD,IACrBI,EAAAA,EAAAA,MAAA,OAEEC,UAAU,gBACVE,QAASA,IAzJHP,KAC5B1C,EAAoB0C,GACpBhC,GAAoB,EAAM,EAuJW0F,CAAqB1D,GAAUM,SAAA,EAE9CE,EAAAA,EAAAA,KAAA,OACEmD,IAAK3D,EAASuB,MACdqC,IAAK5D,EAASC,KACdI,UAAU,qBAEZD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BE,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeC,SAAEN,EAASC,QACzCG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BE,EAAAA,EAAAA,KAACqD,EAAAA,IAAM,CAACC,MAAM,aACdtD,EAAAA,EAAAA,KAAA,QAAAF,SAAON,EAASpD,iBAbfoD,EAASmB,OAmBlBX,EAAAA,EAAAA,KAAA,OAAKH,UAAU,aAAYC,SAAC,4BAMnCjD,IACC+C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BC,SAAA,EACxCE,EAAAA,EAAAA,KAAA,OACEmD,IAAKtG,EAAiBkE,MACtBqC,IAAKvG,EAAiB4C,KACtBI,UAAU,6BAEZD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACrCE,EAAAA,EAAAA,KAAA,MAAAF,SAAKjD,EAAiB4C,QACtBG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BE,EAAAA,EAAAA,KAACqD,EAAAA,IAAM,CAACC,MAAM,aACd1D,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CAAOjD,EAAiBT,OAAO,KAAGS,EAAiB0G,MAAM,yBAI/DvD,EAAAA,EAAAA,KAAA,UACE6C,KAAK,SACLhD,UAAU,kBACVE,QAASA,IAAMvC,GAAoB,GAAMsC,SAC1C,kBAQTF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBE,EAAAA,EAAAA,KAAA,SAAOwD,QAAQ,eAAc1D,SAAC,eAC9BE,EAAAA,EAAAA,KAAA,SACE6C,KAAK,OACLlC,GAAG,eACHoC,MAAOhF,EACPiF,SAAW5C,GAAMpC,EAAgBoC,EAAE5B,OAAOuE,OAC1ClD,UAAU,eACViD,YAAY,kBACZW,UAAQ,QAIZ7D,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBE,EAAAA,EAAAA,KAAA,SAAAF,SAAO,iBACPF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQC,SAAA,EACrBE,EAAAA,EAAAA,KAAA,KAAGH,UAAU,iBAAgBC,SAAE1D,EAAS,EA3Q7B,CACrB,EAAG,WACH,EAAG,4BACH,EAAG,KACH,EAAG,OACH,EAAG,UAsQkEA,GAAU,wBACrE4D,EAAAA,EAAAA,KAAA,OAAKH,UAAU,QAAOC,SACnB,CAAC,EAAG,EAAG,EAAG,EAAG,GAAG6C,KAAKe,IAEpB,MAAMC,EAAgBpH,GAASH,EAC/B,IAAIwH,EAAY,UAYhB,OAVIF,GAAQC,IAERC,EADED,GAAiB,EACP,UACe,IAAlBA,EACG,UAEA,YAKd3D,EAAAA,EAAAA,KAACqD,EAAAA,IAAM,CAELxD,UAAU,OACVyD,MAAOM,EACPC,KAAM,GACNC,aAAcA,IAAMtH,EAASkH,GAC7BK,aAAcA,IAAMvH,EAAS,GAC7BuD,QAASA,IAAM1D,EAAUqH,GACzBM,MAAO,CAAEC,OAAQ,UAAWC,WAAY,eAPnCR,EAQL,aAOZ9D,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBE,EAAAA,EAAAA,KAAA,SAAOwD,QAAQ,SAAQ1D,SAAC,sCACxBE,EAAAA,EAAAA,KAAA,YACEW,GAAG,SACHoC,MAAOtG,EACPuG,SAAW5C,GAAM1D,EAAU0D,EAAE5B,OAAOuE,OACpClD,UAAU,eACVsE,KAAK,IACLC,UAAU,KACVX,UAAQ,EACRX,YAAY,wGAEdlD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,CAAErD,EAAO+D,OAAO,gCAGlDR,EAAAA,EAAAA,KAAA,UAAQ6C,KAAK,SAAShD,UAAU,gBAAgBwE,SAAU5G,EAAUqC,SACjErC,EAAY,gBAAkB,0BAIjC,C","sources":["pages/ReviewPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { FaStar, FaArrowLeft } from 'react-icons/fa';\nimport { toast } from 'react-toastify';\nimport './ReviewPage.css';\n\nconst ReviewPage = () => {\n  const [rating, setRating] = useState(0);\n  const [hover, setHover] = useState(0);\n  const [review, setReview] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [selectedProvider, setSelectedProvider] = useState(null);\n  const [serviceProviders, setServiceProviders] = useState({});\n  const [filteredProviders, setFilteredProviders] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [showCategoryDropdown, setShowCategoryDropdown] = useState(false);\n  const [showProviderList, setShowProviderList] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [reviewerName, setReviewerName] = useState('');\n  const dropdownRef = useRef(null);\n  \n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setShowCategoryDropdown(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const toggleCategoryDropdown = (e) => {\n    e.stopPropagation();\n    setShowCategoryDropdown(prev => !prev);\n  };\n  \n  const serviceCategories = {\n    1: 'Plumbing Services',\n    2: 'Electrical Work',\n    3: 'Food Catering',\n    4: 'Home Painting',\n    5: 'Transport Services',\n    6: 'Home Cleaning',\n    7: 'Gardening & Lawn',\n    8: 'Home Repair',\n    9: 'Locksmith Services',\n    10: 'Online Courses',\n    11: 'Food Delivery'\n  };\n  \n \n  const ratingMessages = {\n    1: 'Not good',\n    2: 'Could’ve been better',\n    3: 'OK',\n    4: 'Good',\n    5: 'Great!'\n  };\n  \n  const navigate = useNavigate();\n\n  \n  useEffect(() => {\n    try {\n    \n      import('../data/serviceProviders').then(module => {\n        const providersData = module.default;\n        setServiceProviders(providersData);\n      }).catch(err => {\n        console.error('Error loading service providers:', err);\n        setError('Failed to load service providers. Please try again later.');\n      });\n    } catch (err) {\n      setError('Failed to load service providers. Please try again later.');\n      console.error('Error loading service providers:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  \n \n  useEffect(() => {\n    if (selectedCategory && serviceProviders[selectedCategory]) {\n      const filtered = serviceProviders[selectedCategory].filter(provider => \n        provider.name.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n      setFilteredProviders(filtered);\n    }\n  }, [selectedCategory, searchQuery, serviceProviders]);\n  \n  const handleCategorySelect = (categoryId) => {\n    setSelectedCategory(categoryId);\n    setSelectedProvider(null);\n    setShowCategoryDropdown(false);\n    setShowProviderList(true);\n    setSearchQuery('');\n  };\n  \n  const handleProviderSelect = (provider) => {\n    setSelectedProvider(provider);\n    setShowProviderList(false);\n  };\n\nconst handleSubmit = async (e) => {\n  e.preventDefault();\n  setError('');\n  setSuccess('');\n\n\n  if (!reviewerName.trim()) {\n    toast.error('Please enter your name.');\n    return;\n  }\n\n  \n  if (review.length < 45) {\n    toast.error('Review must be at least 45 characters long.');\n    return;\n  }\n\n \n  if (rating === 0) {\n    toast.error('Please select a rating.');\n    return;\n  }\n\n  \n  if (!selectedProvider) {\n    toast.error('Please select a service provider.');\n    return;\n  }\n\n  setIsLoading(true);\n\n  const reviewData = {\n    reviewerName: reviewerName.trim(),\n    providerId: selectedProvider.id || selectedProvider._id,\n    providerName: selectedProvider.name,\n    providerImage: selectedProvider.image,\n    providerCategory: serviceCategories[selectedCategory] || 'General',\n    rating,\n    comment: review\n  };\n\n  try {\n    const res = await fetch('http://localhost:5000/api/reviews', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include', \n      body: JSON.stringify(reviewData)\n    });\n\n    const data = await res.json();\n\n    if (res.status === 401) {\n      toast.error('Please log in to submit a review.');\n      setTimeout(() => {\n        window.location.href = '/login'; \n      }, 1500);\n      return;\n    }\n\n    if (res.ok) {\n      toast.success(data.message || '✅ Review submitted successfully!', {\n        position: 'top-right',\n        autoClose: 3000,\n        theme: 'light'\n      });\n\n     \n      setRating(0);\n      setReviewerName('');\n      setReview('');\n      setSelectedProvider(null);\n    } else {\n      toast.error(data.message || '❌ Failed to submit review.');\n    }\n  } catch (err) {\n    console.error('Error submitting review:', err);\n    toast.error('❌ An error occurred. Please try again.');\n  } finally {\n    setIsLoading(false);\n  }\n};\n\n\n\n\n  return (\n    <div className=\"review-page\">\n      <button className=\"back-button\" onClick={() => navigate(-1)}>\n        <FaArrowLeft /> Back\n      </button>\n      \n      <div className=\"review-container\">\n        <h1>Rate & Review</h1>\n        <p className=\"subtitle\">Share your experience with our service providers</p>\n        \n        {error && <div className=\"error-message\">{error}</div>}\n        {success && <div className=\"success-message\">{success}</div>}\n        \n        <form onSubmit={handleSubmit} className=\"review-form\">\n       \n          <div className=\"form-group\">\n            <label>Select Service Category</label>\n            <div className=\"dropdown\" ref={dropdownRef}>\n              <div \n                className=\"dropdown-toggle form-control\" \n                onClick={toggleCategoryDropdown}\n              >\n                {selectedCategory ? serviceCategories[selectedCategory] : 'Select a category'}\n                <span className={`dropdown-arrow ${showCategoryDropdown ? 'open' : ''}`}>▼</span>\n              </div>\n              {showCategoryDropdown && (\n                <div className=\"dropdown-menu show\">\n                  {Object.entries(serviceCategories).map(([id, name]) => (\n                    <div \n                      key={id} \n                      className=\"dropdown-item\"\n                      onClick={() => handleCategorySelect(id)}\n                    >\n                      {name}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n\n        \n          {selectedCategory && (\n            <div className=\"form-group\">\n              <label>Select Service Provider</label>\n              <div className=\"provider-search\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Search providers...\"\n                  className=\"form-control\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  onFocus={() => setShowProviderList(true)}\n                />\n                {showProviderList && (\n                  <div className=\"provider-list\">\n                    {filteredProviders.length > 0 ? (\n                      filteredProviders.map((provider) => (\n                        <div \n                          key={provider.id} \n                          className=\"provider-item\"\n                          onClick={() => handleProviderSelect(provider)}\n                        >\n                          <img \n                            src={provider.image} \n                            alt={provider.name} \n                            className=\"provider-image1\"\n                          />\n                          <div className=\"provider-info\">\n                            <div className=\"provider-name\">{provider.name}</div>\n                            <div className=\"provider-rating\">\n                              <FaStar color=\"#f9b90b\" />\n                              <span>{provider.rating}</span>\n                            </div>\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"no-results\">No providers found</div>\n                    )}\n                  </div>\n                )}\n              </div>\n              \n              {selectedProvider && (\n                <div className=\"selected-provider\">\n                  <div className=\"selected-provider-content\">\n                    <img \n                      src={selectedProvider.image} \n                      alt={selectedProvider.name}\n                      className=\"selected-provider-image\"\n                    />\n                    <div className=\"selected-provider-info\">\n                      <h4>{selectedProvider.name}</h4>\n                      <div className=\"provider-rating\">\n                        <FaStar color=\"#f9b90b\" />\n                        <span>{selectedProvider.rating} ({selectedProvider.views} reviews)</span>\n                      </div>\n                    </div>\n                  </div>\n                  <button \n                    type=\"button\" \n                    className=\"change-provider\"\n                    onClick={() => setShowProviderList(true)}\n                  >\n                    Change\n                  </button>\n                </div>\n              )}\n            </div>\n          )}\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"reviewerName\">Your Name</label>\n            <input\n              type=\"text\"\n              id=\"reviewerName\"\n              value={reviewerName}\n              onChange={(e) => setReviewerName(e.target.value)}\n              className=\"form-control\"\n              placeholder=\"Enter your name\"\n              required\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label>Your Rating</label>\n            <div className=\"rating\">\n              <p className=\"rating-message\">{rating > 0 ? ratingMessages[rating] : 'Rate this provider'}</p>\n              <div className=\"stars\">\n                {[1, 2, 3, 4, 5].map((star) => {\n                \n                  const currentRating = hover || rating;\n                  let starColor = '#e4e5e9'; \n                  \n                  if (star <= currentRating) {\n                    if (currentRating <= 2) {\n                      starColor = '#ff4444'; \n                    } else if (currentRating === 3) {\n                      starColor = '#f4ec07'; \n                    } else {\n                      starColor = '#f9b90b'; \n                    }\n                  }\n                  \n                  return (\n                    <FaStar\n                      key={star}\n                      className=\"star\"\n                      color={starColor}\n                      size={32}\n                      onMouseEnter={() => setHover(star)}\n                      onMouseLeave={() => setHover(0)}\n                      onClick={() => setRating(star)}\n                      style={{ cursor: 'pointer', transition: 'color 0.2s' }}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"review\">Your Review (min. 45 characters)</label>\n            <textarea\n              id=\"review\"\n              value={review}\n              onChange={(e) => setReview(e.target.value)}\n              className=\"form-control\"\n              rows=\"6\"\n              minLength=\"45\"\n              required\n              placeholder=\"Share your experience with this service provider. Be specific about what you liked or didn't like.\"\n            />\n            <div className=\"character-count\">{review.length}/45 characters minimum</div>\n          </div>\n          \n          <button type=\"submit\" className=\"submit-button\" disabled={isLoading}>\n            {isLoading ? 'Submitting...' : 'Submit Review'}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ReviewPage;\n"],"names":["ReviewPage","rating","setRating","useState","hover","setHover","review","setReview","selectedCategory","setSelectedCategory","selectedProvider","setSelectedProvider","serviceProviders","setServiceProviders","filteredProviders","setFilteredProviders","searchQuery","setSearchQuery","showCategoryDropdown","setShowCategoryDropdown","showProviderList","setShowProviderList","isLoading","setIsLoading","error","setError","success","setSuccess","reviewerName","setReviewerName","dropdownRef","useRef","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","serviceCategories","navigate","useNavigate","then","module","providersData","default","catch","err","console","filtered","filter","provider","name","toLowerCase","includes","_jsxs","className","children","onClick","_jsx","FaArrowLeft","onSubmit","async","e","preventDefault","trim","toast","length","reviewData","providerId","id","_id","providerName","providerImage","image","providerCategory","comment","res","fetch","method","headers","credentials","body","JSON","stringify","data","json","status","setTimeout","window","location","href","ok","message","position","autoClose","theme","ref","stopPropagation","prev","Object","entries","map","_ref","type","placeholder","value","onChange","onFocus","handleProviderSelect","src","alt","FaStar","color","views","htmlFor","required","star","currentRating","starColor","size","onMouseEnter","onMouseLeave","style","cursor","transition","rows","minLength","disabled"],"sourceRoot":""}